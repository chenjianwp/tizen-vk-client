/*
 * EmojiPopup.cpp
 *
 *  Created on: Nov 24, 2013
 *      Author: wolong
 */

#include "EmojiPopup.h"
#include "VKU.h"

using namespace Tizen::Base;
using namespace Tizen::Ui;
using namespace Tizen::Ui::Controls;
using namespace Tizen::Graphics;

#define SMILE_SIZE 64
#define SMILE_OFFSET 7
#define SMILE_ROWS 23
#define SMILE_CELLS 9

Popup *EmojiPopup::_popup = null;

//const int smiles[] = {169, 174, 8252, 8265, 8482, 8505, 8596, 8597, 8598, 8599, 8600, 8601, 8617, 8618, 8986, 8987, 9193, 9194, 9195, 9196, 9200, 9203, 9410, 9642, 9643, 9654, 9664, 9723, 9724, 9725, 9726, 9728, 9729, 9742, 9745, 9748, 9749, 9757, 9786, 9800, 9801, 9802, 9803, 9804, 9805, 9806, 9807, 9808, 9809, 9810, 9811, 9824, 9827, 9829, 9830, 9832, 9851, 9855, 9875, 9888, 9889, 9898, 9899, 9917, 9918, 9924, 9925, 9934, 9940, 9962, 9970, 9971, 9973, 9978, 9981, 9986, 9989, 9992, 9993, 9994, 9995, 9996, 9999, 10002, 10004, 10006, 10024, 10035, 10036, 10052, 10055, 10060, 10062, 10067, 10068, 10069, 10071, 10084, 10133, 10134, 10135, 10145, 10160, 10175, 10548, 10549, 11013, 11014, 11015, 11035, 11036, 11088, 11093, 12336, 12349, 12951, 12953, 101603, 114915, 115939, 116963, 117987, 119011, 120035, 121059, 122083, 123107, 124131, 126980, 127183, 127344, 127345, 127358, 127359, 127374, 127377, 127378, 127379, 127380, 127381, 127382, 127383, 127384, 127385, 127386, 127489, 127490, 127514, 127535, 127538, 127539, 127540, 127541, 127542, 127543, 127544, 127545, 127546, 127568, 127569, 127744, 127745, 127746, 127747, 127748, 127749, 127750, 127751, 127752, 127753, 127754, 127755, 127756, 127757, 127758, 127759, 127760, 127761, 127762, 127763, 127764, 127765, 127766, 127767, 127768, 127769, 127770, 127771, 127772, 127773, 127774, 127775, 127776, 127792, 127793, 127794, 127795, 127796, 127797, 127799, 127800, 127801, 127802, 127803, 127804, 127805, 127806, 127807, 127808, 127809, 127810, 127811, 127812, 127813, 127814, 127815, 127816, 127817, 127818, 127819, 127820, 127821, 127822, 127823, 127824, 127825, 127826, 127827, 127828, 127829, 127830, 127831, 127832, 127833, 127834, 127835, 127836, 127837, 127838, 127839, 127840, 127841, 127842, 127843, 127844, 127845, 127846, 127847, 127848, 127849, 127850, 127851, 127852, 127853, 127854, 127855, 127856, 127857, 127858, 127859, 127860, 127861, 127862, 127863, 127864, 127865, 127866, 127867, 127868, 127872, 127873, 127874, 127875, 127876, 127877, 127878, 127879, 127880, 127881, 127882, 127883, 127884, 127885, 127886, 127887, 127888, 127889, 127890, 127891, 127904, 127905, 127906, 127907, 127908, 127909, 127910, 127911, 127912, 127913, 127914, 127915, 127916, 127917, 127918, 127919, 127920, 127921, 127922, 127923, 127924, 127925, 127926, 127927, 127928, 127929, 127930, 127931, 127932, 127933, 127934, 127935, 127936, 127937, 127938, 127939, 127940, 127942, 127943, 127944, 127945, 127946, 127968, 127969, 127970, 127971, 127972, 127973, 127974, 127975, 127976, 127977, 127978, 127979, 127980, 127981, 127982, 127983, 127984, 128000, 128001, 128002, 128003, 128004, 128005, 128006, 128007, 128008, 128009, 128010, 128011, 128012, 128013, 128014, 128015, 128016, 128017, 128018, 128019, 128020, 128021, 128022, 128023, 128024, 128025, 128026, 128027, 128028, 128029, 128030, 128031, 128032, 128033, 128034, 128035, 128036, 128037, 128038, 128039, 128040, 128041, 128042, 128043, 128044, 128045, 128046, 128047, 128048, 128049, 128050, 128051, 128052, 128053, 128054, 128055, 128056, 128057, 128058, 128059, 128060, 128061, 128062, 128064, 128066, 128067, 128068, 128069, 128070, 128071, 128072, 128073, 128074, 128075, 128076, 128077, 128078, 128079, 128080, 128081, 128082, 128083, 128084, 128085, 128086, 128087, 128088, 128089, 128090, 128091, 128092, 128093, 128094, 128095, 128096, 128097, 128098, 128099, 128100, 128101, 128102, 128103, 128104, 128105, 128106, 128107, 128108, 128109, 128110, 128111, 128112, 128113, 128114, 128115, 128116, 128117, 128118, 128119, 128120, 128121, 128122, 128123, 128124, 128125, 128126, 128127, 128128, 128129, 128130, 128131, 128132, 128133, 128134, 128135, 128136, 128137, 128138, 128139, 128140, 128141, 128142, 128143, 128144, 128145, 128146, 128147, 128148, 128149, 128150, 128151, 128152, 128153, 128154, 128155, 128156, 128157, 128158, 128159, 128160, 128161, 128162, 128163, 128164, 128165, 128166, 128167, 128168, 128169, 128170, 128171, 128172, 128173, 128174, 128175, 128176, 128177, 128178, 128179, 128180, 128181, 128182, 128183, 128184, 128185, 128186, 128187, 128188, 128189, 128190, 128191, 128192, 128193, 128194, 128195, 128196, 128197, 128198, 128199, 128200, 128201, 128202, 128203, 128204, 128205, 128206, 128207, 128208, 128209, 128210, 128211, 128212, 128213, 128214, 128215, 128216, 128217, 128218, 128219, 128220, 128221, 128222, 128223, 128224, 128225, 128226, 128227, 128228, 128229, 128230, 128231, 128232, 128233, 128234, 128235, 128236, 128237, 128238, 128239, 128240, 128241, 128242, 128243, 128244, 128245, 128246, 128247, 128249, 128250, 128251, 128252, 128256, 128257, 128258, 128259, 128260, 128261, 128262, 128263, 128264, 128265, 128266, 128267, 128268, 128269, 128270, 128271, 128272, 128273, 128274, 128275, 128276, 128277, 128278, 128279, 128280, 128281, 128282, 128283, 128284, 128285, 128286, 128287, 128288, 128289, 128290, 128291, 128292, 128293, 128294, 128295, 128296, 128297, 128298, 128299, 128300, 128301, 128302, 128303, 128304, 128305, 128306, 128307, 128308, 128309, 128310, 128311, 128312, 128313, 128314, 128315, 128316, 128317, 128336, 128337, 128338, 128339, 128340, 128341, 128342, 128343, 128344, 128345, 128346, 128347, 128348, 128349, 128350, 128351, 128352, 128353, 128354, 128355, 128356, 128357, 128358, 128359, 128507, 128508, 128509, 128510, 128511, 128512, 128513, 128514, 128515, 128516, 128517, 128518, 128519, 128520, 128521, 128522, 128523, 128524, 128525, 128526, 128527, 128528, 128529, 128530, 128531, 128532, 128533, 128534, 128535, 128536, 128537, 128538, 128539, 128540, 128541, 128542, 128543, 128544, 128545, 128546, 128547, 128548, 128549, 128550, 128551, 128552, 128553, 128554, 128555, 128556, 128557, 128558, 128559, 128560, 128561, 128562, 128563, 128564, 128565, 128566, 128567, 128568, 128569, 128570, 128571, 128572, 128573, 128574, 128575, 128576, 128581, 128582, 128583, 128584, 128585, 128586, 128587, 128588, 128589, 128590, 128591, 128640, 128641, 128642, 128643, 128644, 128645, 128646, 128647, 128648, 128649, 128650, 128651, 128652, 128653, 128654, 128655, 128656, 128657, 128658, 128659, 128660, 128661, 128662, 128663, 128664, 128665, 128666, 128667, 128668, 128669, 128670, 128671, 128672, 128673, 128674, 128675, 128676, 128677, 128678, 128679, 128680, 128681, 128682, 128683, 128684, 128685, 128686, 128687, 128688, 128689, 128690, 128691, 128692, 128693, 128694, 128695, 128696, 128697, 128698, 128699, 128700, 128701, 128702, 128703, 128704, 128705, 128706, 128707, 128708, 128709};
const int smiles[] = { 128538, 128515, 128514, 128139, 128525, 128546, 128521, 128532, 128536, 128540, 9829, 128522, 9786, 128526, 128516, 128523, 128512, 128563, 128545, 128527, 128553, 128552, 128524, 128519, 128528, 128561, 128533, 128539, 128076, 9996, 128541, 128150, 128518, 128560, 128169, 128544, 128149, 128573, 127802, 128542, 128079, 128513, 128156, 127799, 128537, 128151, 128068, 128158, 128571, 128153, 128154, 9995, 128074, 128155, 128060, 128517, 127874, 128550, 128070, 128152, 128549, 128557, 128529, 127804, 128584, 128559, 128078, 128562, 128591, 127827, 128576, 128569, 128077, 127873, 128125, 128157, 128568, 128564, 128127, 128143, 127800, 127820, 127867, 128166, 128049, 9728, 127801, 128121, 127866, 128299, 128567, 127826, 128144, 128131, 127881, 128530, 128170, 128069, 127813, 127864, 128555, 128548, 128534, 128293, 9757, 127880, 10024, 128554, 128586, 128148, 128059, 128048, 127863, 128566, 128684, 128547, 128176, 128286, 128543, 128556, 127856, 127853, 128572, 127814, 127805, 128531, 127817, 128535, 128062, 128159, 128111, 128029, 127803, 128056, 128054, 128145, 128040, 128005, 128037, 128570, 128585, 10084, 128017, 128061, 128128, 128163, 128165, 128164, 10052, 9749, 128701, 128173, 128099, 128551, 127829, 128122, 127828, 127872, 128055, 128024, 128104, 9992, 128067, 127851, 128298, 128020, 128075, 127849, 128028, 127774, 128140, 128015, 128052, 127882, 127823, 127825, 128012, 127868, 9889, 127936, 127384, 128071, 128035, 128046, 128124, 128107, 128142, 127773, 127822, 127775, 128130, 128022, 127939, 128694, 128025, 128587, 127808, 128008, 128058, 128057, 127852, 9729, 128574, 127850, 128112, 128044, 128581, 128089, 128007, 128096, 128081, 128106, 128045, 127819, 128115, 128027, 128123, 127770, 127865, 128582, 127812, 127796, 9986, 127847, 127821, 127830, 10067, 128558, 128043, 128051, 128014, 127937, 127928, 128023, 127771, 128692, 128137, 9994, 128053, 128138, 128657, 127877, 127846, 128041, 128664, 128205, 128066, 128241, 11036, 10004, 127818, 128110, 128000, 9917, 127757, 128102, 9925, 128118, 128704, 128588, 128003, 127815, 128146, 128192, 128036, 128086, 128703, 128120, 128087, 127860, 128031, 128660, 128296, 127839, 128016, 9993, 127797, 128032, 127824, 127844, 128129, 127974, 127848, 127859, 128116, 128167, 127794, 128105, 128013, 127946, 128640, 128108, 128103, 128034, 127841, 127754, 128080, 128039, 128663, 128668, 127942, 128042, 128011, 128262, 128126, 128021, 128132, 128018, 128172, 127807, 9827, 127876, 128168, 9924, 128117, 128113, 128665, 9888, 128030, 9824, 127792, 128134, 10071, 128511, 128182, 127861, 128095, 128085, 127795, 128693, 127854, 128133, 127875, 127838, 128181, 128247, 9940, 128004, 127837, 128147, 127921, 127929, 127908, 127843, 128010, 127769, 127911, 11088, 128114, 128083, 128675, 127793, 128009, 9830, 127913, 9742, 128038, 128001, 128590, 127927, 128659, 127836, 11035, 128135, 127886, 128583, 127752, 127806, 128084, 127845, 127934, 128187, 127855, 128184, 127811, 128091, 128026, 128002, 128520, 127765, 128073, 128090, 127809, 128226, 9748, 128050, 128666, 128171, 128094, 127842, 127922, 128276, 9851, 127835, 128092, 127857, 128667, 128119, 128033, 128161, 128188, 128658, 127840, 128175, 128047, 128006, 128679, 127816, 128204, 128680, 128072, 128672, 127858, 128141, 128098, 127940, 9918, 9203, 128097, 128180, 128088, 127926, 9200, 127756, 128643, 128183, 127834, 127746, 128295, 9973, 128676, 128661, 128652, 127914, 128162, 127810, 127925, 127772, 127932, 127917, 128669, 127776, 127883, 9962, 9999, 128213, 127977, 128682, 127943, 8597, 127862, 128690, 127933, 10060, 127930, 9898, 128191, 127912, 127884, 12336, 128109, 127919, 10068, 128308, 128656, 128273, 128250, 127907, 127744, 128565, 128206, 128082, 128641, 127747, 127749, 127890, 128642, 10069, 128216, 127183, 127931, 127891, 128662, 128654, 128644, 128651, 128671, 9642, 127915, 128589, 128218, 128179, 127916, 128302, 9981, 127887, 127878, 128673, 128297, 127761, 124131, 127938, 128093, 128215, 127935, 127888, 128670, 10145, 128200, 127920, 128650, 127923, 127885, 10002, 128698, 11093, 127970, 127768, 128220, 126980, 127944, 128217, 9899, 128136, 128249, 128221, 128214, 127924, 128210, 128645, 128189, 128208, 9832, 128648, 128294, 128064, 128700, 9971, 127945, 127762, 127767, 128101, 128186, 10006, 128100, 127879, 9978, 127968, 8596, 128301, 128647, 128653, 127763, 127973, 127764, 128305, 128251, 127766, 128242, 128252, 128201, 128225, 128211, 8252, 128190, 128697, 127889, 128309, 128646, 128270, 127748, 127833, 128655, 127759, 9875, 127755, 128509, 128222, 127378, 127359, 128197, 128303, 128300, 128239, 128209, 128238, 128212, 128202, 128287, 128196, 127758, 9803, 127976, 128266, 127760, 127751, 9745, 9654, 127750, 9806, 127383, 10035, 128240, 128230, 9804, 9800, 128199, 128223, 9810, 128245, 127984, 9724, 127832, 128224, 127979, 128304, 128683, 128174, 127909, 9802, 127980, 128237, 127753, 9989, 9801, 127918, 9808, 128685, 128203, 11014, 9811, 11015, 9807, 127983, 127745, 128264, 127971, 11013, 9805, 128702, 127344, 127972, 128278, 128678, 9723, 128649, 127905, 127345, 128674, 128507, 128265, 9809, 10055, 128267, 9726, 127978, 127906, 8600, 128695, 128699, 127981, 10133, 8598, 128687, 128290, 9664, 127358, 12349, 128263, 128315, 128261, 128227, 128285, 9855, 128314, 128677, 9643, 128681, 8601, 128019, 128288, 10160, 127831, 128274, 128235, 128268, 127904, 128272, 8599, 127386, 9970, 128311, 128310, 128281, 128284, 10134, 128689, 128313, 127969, 8986, 128691, 128705, 128160, 128307, 128275, 128233, 128282, 128510, 127982, 8987, 128283, 128306, 128508, 128317, 128236, 127377, 128289, 10036, 128219, 128291, 128269, 128312, 128178, 128260, 128271, 128177, 128243, 128234, 128246, 128292, 128193, 9410, 128207, 128232, 9934, 128316, 10062, 127381, 9196, 9725, 128229, 128279, 127385, 127380, 9193, 128688, 128194, 128280, 128244, 128231, 128228, 128696, 128195, 127910, 128198, 8617, 127489, 128259, 9195, 10135, 9194, 127379, 127975, 128686, 8618, 10175, 128709, 10549, 10548, 8505, 127374, 128708, 128185, 128257, 128575, 128258, 128277, 127382, 128256, 128706, 8265, 128707 };

EmojiPopup::EmojiPopup(EditArea *editArea) {
	_editArea = editArea;
}

EmojiPopup::~EmojiPopup() {

}

void EmojiPopup::Show(EditArea *editArea) {
	EmojiPopup *emoji = new EmojiPopup(editArea);
	emoji->Start();
}

void EmojiPopup::Start() {

	if(_popup == null) {
		RelativeLayout popupLayout;
		popupLayout.Construct();

		_popup = new Popup();
		_popup->Construct(popupLayout, false, Dimension(600, 800));
	}

	_popup->SetPropagatedKeyEventListener(this);

	ScrollPanel *scrollPanel = new ScrollPanel();
	scrollPanel->Construct(_popup->GetClientAreaBounds());
	scrollPanel->SetScrollBarVisible(false);

	Button *button;

	for(int i = 0; i < SMILE_ROWS; i++) {
		for(int j = 0; j < SMILE_CELLS; j++) {
			int index = i * SMILE_CELLS + j;
			if(index < 835) {
				String filePath(L"emoji/");
				filePath.Append(smiles[index]);
				filePath.Append(L".png");
				Bitmap *emojiBitmap = VKUApp::GetInstance()->GetAppResource()->GetBitmapN(filePath);
				button = new Button();
				button->Construct(Rectangle(j*SMILE_SIZE, i*SMILE_SIZE, SMILE_SIZE, SMILE_SIZE));
				button->SetNormalBitmap(Point(SMILE_OFFSET, SMILE_OFFSET), *emojiBitmap);
				button->SetActionId(smiles[index]);
				button->AddActionEventListener(*this);
				scrollPanel->AddControl(button);
				delete emojiBitmap;
			}
		}
	}

	_popup->AddControl(scrollPanel);

	RelativeLayout * layout = dynamic_cast<RelativeLayout *>(_popup->GetLayoutN());
	layout->SetCenterAligned(*scrollPanel, CENTER_ALIGN_HORIZONTAL);
	delete layout;

	_popup->SetShowState(true);
	_popup->Show();
}


bool EmojiPopup::OnKeyReleased(Control& source, const KeyEventInfo& keyEventInfo) {
   KeyCode key = keyEventInfo.GetKeyCode();
   if (key == KEY_BACK || key == KEY_ESC) {
      _popup->SetShowState(false);
      _popup->RemoveAllControls();
      _popup->Invalidate(true);

      delete this;
   }

   return false;
}


void EmojiPopup::OnActionPerformed(const Tizen::Ui::Control& source, int actionId) {
	String value(L"&#");
	value.Append(actionId);
	value.Append(L";");
	String filePath(L"emoji/");
	filePath.Append(actionId);
	filePath.Append(L".png");
	Bitmap *bitmap = VKUApp::GetInstance()->GetAppResource()->GetBitmapN(filePath);
	_editArea->AppendText(value, *bitmap);
	_editArea->RequestRedraw(true);
	delete bitmap;

	// remove popup?

    _popup->SetShowState(false);
    _popup->RemoveAllControls();
    _popup->Invalidate(true);
    delete this;
}
